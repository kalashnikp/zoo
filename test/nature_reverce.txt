{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from animal import Animal\n",
    "from instances import Bird, Fish, Dog\n",
    "import random\n",
    "\n",
    "class NatureReverse():\n",
    "    '''Инициализация класса заповедника / Initialization of the reserve class'''\n",
    "    \n",
    "    global zoo\n",
    "    global is_dead\n",
    "    \n",
    "    def __init__(self) -> None:\n",
    "        pass\n",
    "    \n",
    "    zoo = [\n",
    "        Bird(),\n",
    "        Bird(),\n",
    "        Bird(),\n",
    "        Bird(),\n",
    "        Bird(),\n",
    "        Fish(),\n",
    "        Fish(),\n",
    "        Fish(),\n",
    "        Dog(),\n",
    "        Dog(),\n",
    "        Animal(random.randint(1,5), random.randint(1,5), random.randint(3,5), 'Animal'),\n",
    "        Animal(random.randint(1,5), random.randint(1,5), random.randint(3,5), 'Animal')\n",
    "    ]\n",
    "    \n",
    "    is_dead = []\n",
    "        \n",
    "    def new_zoo(self):\n",
    "        '''Функция производства потомства / to produce offspring function'''\n",
    "    \n",
    "        def prob():\n",
    "            '''Функция генерации случайного булевого значения / Generate random Bool'''\n",
    "            global b\n",
    "            b = random.choice([True, False])\n",
    "            return b\n",
    "                \n",
    "        i = 0    \n",
    "        while i < 10: \n",
    "            prob()\n",
    "            if b == True:\n",
    "                q = random.choice([Animal(random.randint(1,5), random.randint(1,5), random.randint(1,5), 'Animal'), Bird(), Fish(), Dog()])\n",
    "                zoo.append(q)\n",
    "            i += 1    \n",
    "\n",
    "\n",
    "    def do_something(self):\n",
    "        '''Функция построения логики одной итерации / The function of building the logic of one iteration'''\n",
    "\n",
    "        def prob():\n",
    "            '''Функция генерации случайного булевого значения / Generate random Bool'''\n",
    "            global b\n",
    "            b = random.choice([True, False])\n",
    "            return b\n",
    "\n",
    "        for item in zoo:\n",
    "            prob()\n",
    "            if b == True:\n",
    "                random.choice([item.walk(), item.sleep(), item.eat()])\n",
    "    \n",
    "        for item in zoo:\n",
    "            if item.is_too_old == True or item.energy <= 0 or item.weight <= 0 or item.weight > 10:\n",
    "                zoo.remove(item)\n",
    "                is_dead.append(item)\n",
    "               \n",
    "        \n",
    "    \n",
    "    \n",
    "    \n",
    "        \n",
    "                \n",
    "       \n",
    "\n",
    "        \n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
